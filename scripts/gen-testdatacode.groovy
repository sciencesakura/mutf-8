// SPDX-License-Identifier: MIT

import groovy.json.*
import static java.io.ObjectStreamConstants.*

def header = '''\
// This file is generated by scripts/gen-testdatacode.groovy
'''

def generateTestdataCode = { jsonFile ->
  def code = new StringBuilder(header)
  code << 'const testdata = ['
  new JsonSlurper().parse(jsonFile).each {
    def name = it.name
    def text = it.text
    def binary = new ByteArrayOutputStream().with {
      new ObjectOutputStream(it).withCloseable { it.writeUTF(text) }
      def serial = it.toByteArray()
      //  off | field          | value
      // -----|----------------|--------------------------------
      //    0 | magic          | STREAM_MAGIC
      //    2 | version        | STREAM_VERSION
      //    4 | tag            | TC_BLOCKDATA
      //    5 | size           | sizeof(length) + sizeof(bytes)
      //    6 | length         | sizeof(bytes)
      //    8 | bytes          | MUTF-8 encoded string
      assert serial[4] == TC_BLOCKDATA
      serial[8..<serial.length].collect(Byte::toUnsignedInt)
    }
    def jsName = StringEscapeUtils.escapeJavaScript(name)
    def jsText = StringEscapeUtils.escapeJavaScript(text)
    def jsBinary = binary.collect { '0x' + Integer.toHexString(it) }.join(', ')
    code << """
      |  {
      |    name: "$jsName",
      |    text: "$jsText",
      |    binary: new Uint8Array([$jsBinary]),
      |  },""".stripMargin()
  }
  code << '\n];'
  code << '\nexport default testdata;\n'
  code.toString()
}

new File(this.args[0]).eachFileMatch(~/.*\.json/) { file ->
  def name = file.name.replaceFirst(/\.json$/, '')
  def outFile = new File('src', "testdata-${name}.mts")
  outFile.text = generateTestdataCode(file)
}
